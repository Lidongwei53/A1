import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 *
 * This is just a demo for you, please run it on JDK17 (some statements may be not allowed in lower version).
 * This is just a demo, and you can extend and implement functions
 * based on this demo, or implement it in a different way.
 */
public class OnlineCoursesAnalyzer {
  List<Course> courses = new ArrayList<>();

    public OnlineCoursesAnalyzer(String datasetPath) {
    BufferedReader br = null;
    String line;
    try {
      br = new BufferedReader(new FileReader(datasetPath));
      br.readLine();
      while ((line = br.readLine()) != null) {
        String[] info = line.split(",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)", -1);
        Course course = new Course(info[0], info[1], new Date(info[2]), info[3], info[4], info[5],
                Integer.parseInt(info[6]), Integer.parseInt(info[7]), Integer.parseInt(info[8]),
                Integer.parseInt(info[9]), Integer.parseInt(info[10]), Double.parseDouble(info[11]),
                Double.parseDouble(info[12]), Double.parseDouble(info[13]), Double.parseDouble(info[14]),
                Double.parseDouble(info[15]), Double.parseDouble(info[16]), Double.parseDouble(info[17]),
                Double.parseDouble(info[18]), Double.parseDouble(info[19]), Double.parseDouble(info[20]),
                Double.parseDouble(info[21]), Double.parseDouble(info[22]));
                courses.add(course);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
      if (br != null) {
        try {
          br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    //1
    public Map<String, Integer> getPtcpCountByInst() {
    Stream<Course> courseStream = courses.stream();
    Stream<String> institutionStream = courseStream.map(Course::getInstitution)
                .distinct();
    List<String> institutionList = institutionStream.collect(Collectors.toList());
    ArrayList institutionIntList = new ArrayList();
    for (int i = 0; i < institutionList.size(); i++) {
    institutionIntList.add(i, 0);
      for (int j = 0; j < courses.size(); j++) {
        if (courses.get(j).getInstitution().equals(institutionList.get(i))) {
          int t = (int) institutionIntList.get(i);
            t += courses.get(j).getParticipants();
            institutionIntList.add(i, t);
                }
            }
        }
    Map<String, Integer> PtcpCountByInst = new HashMap<>();
    for (int i = 0; i < institutionList.size(); i++) {
      String institution = institutionList.get(i);
      int cnt = (int) institutionIntList.get(i);
      PtcpCountByInst.put(institution, cnt);
        }
    Map<String, Integer> result = new LinkedHashMap<>();
    PtcpCountByInst.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEachOrdered(e -> result.put(e.getKey(), e.getValue()));
    return result;

    }

    //2
    public Map<String, Integer> getPtcpCountByInstAndSubject() {
        Stream<Course> courseStream = courses.stream();
        List<String> instList = courseStream.map(Course::getInstitution).collect(Collectors.toList());
        Stream<Course> courseStream1 = courses.stream();
        List<String> subjList = courseStream1.map(Course::getSubject).collect(Collectors.toList());
        List<String> instSubjList = new ArrayList<>();
        for (int i = 0; i < instList.size(); i++) {
            String inst = instList.get(i);
            String subj = subjList.get(i);
            String instSubj = inst + "-" + subj;
            instSubjList.add(i, instSubj);
        }
        Stream<String> instSubjStream = instSubjList.stream()
                .distinct();
        List<String> instSubjFinList = instSubjStream.collect(Collectors.toList());
        ArrayList cntList = new ArrayList<>();
        for (int i = 0; i < instSubjFinList.size(); i++) {
            cntList.add(i, 0);
            for (int j = 0; j < courses.size(); j++) {
                String[] split = instSubjFinList.get(i).split("-");
                if (courses.get(j).getInstitution().equals(split[0]) && courses.get(j).getSubject().equals(split[1])) {
                    int t = (int) cntList.get(i);
                    t += courses.get(j).getParticipants();
                    cntList.add(i, t);
                }
            }
        }
        Map<String, Integer> PtcpCountByInstAndSubject = new HashMap<>();
        for (int i = 0; i < instSubjFinList.size(); i++) {
            String institution = instSubjFinList.get(i);
            int cnt = (int) cntList.get(i);
            PtcpCountByInstAndSubject.put(institution, cnt);
        }
        Map<String, Integer> result = new LinkedHashMap<>();
        PtcpCountByInstAndSubject.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue().reversed()).forEachOrdered(e -> result.put(e.getKey(), e.getValue()));
        return result;

    }

    //3
    public Map<String, List<List<String>>> getCourseListOfInstructor() {
        Map<String, List<List<String>>> resMap = new LinkedHashMap<>();
        List<Course> courses1 = courses.stream().sorted(Comparator.comparing(Course::getTitle)).collect(Collectors.toList());
        List<String> instructorList = new ArrayList<>();
        for (Course cours : courses1) {
            String[] strs = cours.getInstructors().split(", ");
            for (String str : strs) {
                int flag = 0;
                for (String str1 : instructorList) {
                    if (str.equals(str1)) {
                        flag = 1;
                    }
                }
                if (flag == 0) {
                    instructorList.add(str);
                }
            }
        }
        /*System.out.println(instructorList);
        for(int i=0;i<instructorList.size();i++){
            for(int j=0;j<instructorList.size();j++){
                if(i!=j){
                    if(instructorList.get(i).equals(instructorList.get(j))){
                        System.out.println(1);
                    }
                }
            }
        }*/

        System.out.println(instructorList);
        Map<String, List<String>> tstMap = new HashMap<>();
        List<List<String>> listThree = new ArrayList<>();
        List<String> tstList = new ArrayList<>();
        for (String inst : instructorList) {
            List<String> listZero = new ArrayList<>();
            List<String> listOne = new ArrayList<>();
            List<List<String>> listTwo = new ArrayList<>();
            for (Course cours : courses1) {
                if (inst.equals(cours.getInstructors())) {
                    int flag = 0;
                    for (int i = 0; i < listZero.size(); i++) {
                        if (listZero.get(i).equals(cours.getTitle())) {
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 0) {
                        listZero.add(cours.getTitle());
                    }
                }
                if (!inst.equals(cours.getInstructors())) {
                    String[] strs = cours.getInstructors().split(", ");
                    for (String str : strs) {
                        if (str.equals(inst)) {
                            int flag2 = 0;
                            for (int k = 0; k < listOne.size(); k++) {
                                if (listOne.get(k).equals(cours.getTitle())) {
                                    flag2 = 1;
                                    break;
                                }
                            }
                            if (flag2 == 0) {
                                listOne.add(cours.getTitle());
                            }
                            break;
                        }
                    }
                }


            }

      for (int i = 0; i < listOne.size(); i++) {
        for (int j = 0; j < listOne.size(); j++) {
          if (i != j && listOne.get(i).equals(listOne.get(j))) {
                        System.out.println("1");
                    }

                }
            }
            tstMap.put(inst, listOne);
            listTwo.add(listZero);
            listTwo.add(listOne);
            resMap.put(inst, listTwo);
        }

        return resMap;
    }

    //4
    public List<String> getCourses(int topK, String by) {
        List<String> getCoursesList = new ArrayList<>();
        if (by.equals("hours")) {
            List<Course> getCoursesStream = courses.stream().sorted(Comparator.comparing(Course::getTotalHours).reversed().thenComparing(Course::getTitle)).collect(Collectors.toList());
            List<String> distinctList = new ArrayList<>();
            for (int i = 0; i < courses.size(); i++) {
                distinctList.add(i, getCoursesStream.get(i).getTitle());
            }
            distinctList = distinctList.stream().distinct().collect(Collectors.toList());
            for (int i = 0; i < topK; i++) {
                getCoursesList.add(distinctList.get(i));
            }
        } else if (by.equals("participants")) {
            List<Course> getCoursesStream = courses.stream().sorted(Comparator.comparing(Course::getParticipants).reversed().thenComparing(Course::getTitle)).collect(Collectors.toList());
            List<String> distinctList = new ArrayList<>();
            for (int i = 0; i < courses.size(); i++) {
                distinctList.add(i, getCoursesStream.get(i).getTitle());
            }
            distinctList = distinctList.stream().distinct().collect(Collectors.toList());
            for (int i = 0; i < topK; i++) {
                getCoursesList.add(distinctList.get(i));
            }
        }

        return getCoursesList;
    }

    //5
    public List<String> searchCourses(String courseSubject, double percentAudited, double totalCourseHours) {
        List<String> searchCoursesList = new ArrayList<>();

        for (int i = 0; i < courses.size(); i++) {
            if (courses.get(i).getSubject().toLowerCase().contains(courseSubject.toLowerCase())) {
                if (courses.get(i).getPercentAudited() >= percentAudited && courses.get(i).getTotalHours() <= totalCourseHours) {
                    searchCoursesList.add(courses.get(i).getTitle());
                }
            }
        }
        searchCoursesList = searchCoursesList.stream().distinct().collect(Collectors.toList());
        Collections.sort(searchCoursesList);

        return searchCoursesList;
    }

    //6
    public List<String> recommendCourses(int age, int gender, int isBachelorOrHigher) {
        List<String> numberList = new ArrayList<>();
        for (int i = 0; i < courses.size(); i++) {
            numberList.add(courses.get(i).getNumber());
        }
        numberList = numberList.stream().distinct().collect(Collectors.toList());
        List ama = new ArrayList<>();
        List apm = new ArrayList<>();
        List apbdh = new ArrayList<>();
        for (int i = 0; i < numberList.size(); i++) {
            double dama = 0D;
            double dapm = 0D;
            double dapbdh = 0D;
            int flag = 0;
            for (int j = 0; j < courses.size(); j++) {
                if (courses.get(j).getNumber().equals(numberList.get(i))) {
                    dama += courses.get(j).getMedianAge();
                    dapm += courses.get(j).getPercentMale();
                    dapbdh += courses.get(j).getPercentDegree();
                    flag++;
                }
            }
            dama = dama / flag;
            dapm = dapm / flag;
            dapbdh = dapbdh / flag;
            ama.add(dama);
            apm.add(dapm);
            apbdh.add(dapbdh);
        }
        List<Double> similarityList = new ArrayList<>();
        //List<Course> dateList = courses.stream().sorted(Comparator.comparing(Course::getLaunchDate)).collect(Collectors.toList());
        for (int i = 0; i < numberList.size(); i++) {
            double sim = (age - (double) ama.get(i)) * (age - (double) ama.get(i)) + (gender * 100 - (double) apm.get(i)) * (gender * 100 - (double) apm.get(i)) + (isBachelorOrHigher * 100 - (double) apbdh.get(i)) * (isBachelorOrHigher * 100 - (double) apbdh.get(i));
            similarityList.add(i, sim);
            for (int j = 0; j < courses.size(); j++) {
                if (courses.get(j).getNumber().equals(numberList.get(i))) {
                    courses.get(j).setSimilarity(sim);

                }
            }
        }
        /*Map<Double,String> doubleMap = new LinkedHashMap<>();
        for(int i=0;i<numberList.size();i++){
            doubleMap.put(similarity.get(i),numberList.get(i));
        }
        Map<Double,String> resMap = new LinkedHashMap<>();
        doubleMap.entrySet().stream().sorted(Map.Entry.comparingByKey()).forEachOrdered(s->resMap.put(s.getKey(),s.getValue()));
        List<String> numberSortedList = resMap.values().stream().collect(Collectors.toList());
        List<String> resultTitleList = new ArrayList<>();
        for(int i =0;i<10;i++){
            List<Course> toBeSortedList = new ArrayList<>();
            for(int j =0;j<courses.size();j++){
                if(numberSortedList.get(i).equals(courses.get(j).getNumber())){
                    toBeSortedList.add(courses.get(j));
                }
            }
            toBeSortedList=toBeSortedList.stream().sorted(Comparator.comparing(Course::getLaunchDate).reversed()).collect(Collectors.toList());
            resultTitleList.add(toBeSortedList.get(0).getTitle());
        }*/

        List<Course> coursesStdBySim = courses.stream().sorted(Comparator.comparing(Course::getSimilarity).thenComparing(Course::getTitle)).collect(Collectors.toList());
        List<Course> coursesStdBySim2 = new ArrayList<>();
        for (int i = 0; i < coursesStdBySim.size(); i++) {
            int flag = 0;
            for (int j = 0; j < coursesStdBySim2.size(); j++) {

                if (coursesStdBySim.get(i).getNumber().equals(coursesStdBySim2.get(j).getNumber())) {
                    flag = 1;
                    if (coursesStdBySim.get(i).getLaunchDate().compareTo(coursesStdBySim2.get(j).getLaunchDate()) > 0) {
                        coursesStdBySim2.set(j, coursesStdBySim.get(i));
                    }
                }

            }
            if (flag == 0) {
                coursesStdBySim2.add(coursesStdBySim.get(i));
            }
        }

        for(int i=0;i<coursesStdBySim2.size();i++){
            for(int j=0;j<coursesStdBySim2.size();j++){

                if(!(coursesStdBySim2.get(i).getSimilarity()>coursesStdBySim2.get(j).getSimilarity()||coursesStdBySim2.get(i).getSimilarity()<coursesStdBySim2.get(j).getSimilarity())){
                    if(coursesStdBySim2.get(j).getTitle().compareTo(coursesStdBySim2.get(i).getTitle())>0){
                        Course cours = coursesStdBySim2.get(j);
                        coursesStdBySim2.set(j,coursesStdBySim2.get(i));
                        coursesStdBySim2.set(i,cours);
                    }
                }

            }

        }
        List<String> lst = new ArrayList<>();
        for(int i=0;i<coursesStdBySim2.size();i++) {
            int flag = 0;
            for (int j = 0; j < lst.size(); j++) {
                if (lst.get(j).equals(coursesStdBySim2.get(i).getTitle())) {
                    flag = 1;
                    break;
                }
            }
            if (flag == 0) {
                lst.add(coursesStdBySim2.get(i).getTitle());

            }
            if (lst.size() == 10) {
                break;
            }
        }
        return lst;
    }

    /*public static void main(String[] args){
        OnlineCoursesAnalyzer OCA =new OnlineCoursesAnalyzer("D:\\IdeaProjects\\A1\\resources\\local.csv");
        System.out.println(OCA.getPtcpCountByInst());
        System.out.println(OCA.getPtcpCountByInstAndSubject());
        System.out.println(OCA.getCourseListOfInstructor());
        System.out.println(OCA.getCourses(10,"hours"));
        System.out.println(OCA.getCourses(15,"participants"));
        System.out.println(OCA.searchCourses("computer",20.0,700));
        System.out.println(OCA.recommendCourses(25,1,1));
        System.out.println(OCA.recommendCourses(30,0,1));
        System.out.println(OCA.recommendCourses(35,1,0));
    }*/

}

class Course {
    String institution;
    String number;
    Date launchDate;
    String title;
    String instructors;
    String subject;
    int year;
    int honorCode;
    int participants;
    int audited;
    int certified;
    double percentAudited;
    double percentCertified;
    double percentCertified50;
    double percentVideo;
    double percentForum;
    double gradeHigherZero;
    double totalHours;
    double medianHoursCertification;
    double medianAge;
    double percentMale;
    double percentFemale;
    double percentDegree;

    double similarity;

    public Course(String institution, String number, Date launchDate,
                  String title, String instructors, String subject,
                  int year, int honorCode, int participants,
                  int audited, int certified, double percentAudited,
                  double percentCertified, double percentCertified50,
                  double percentVideo, double percentForum, double gradeHigherZero,
                  double totalHours, double medianHoursCertification,
                  double medianAge, double percentMale, double percentFemale,
                  double percentDegree) {
        this.institution = institution;
        this.number = number;
        this.launchDate = launchDate;
        if (title.startsWith("\"")) title = title.substring(1);
        if (title.endsWith("\"")) title = title.substring(0, title.length() - 1);
        this.title = title;
        if (instructors.startsWith("\"")) instructors = instructors.substring(1);
        if (instructors.endsWith("\"")) instructors = instructors.substring(0, instructors.length() - 1);
        this.instructors = instructors;
        if (subject.startsWith("\"")) subject = subject.substring(1);
        if (subject.endsWith("\"")) subject = subject.substring(0, subject.length() - 1);
        this.subject = subject;
        this.year = year;
        this.honorCode = honorCode;
        this.participants = participants;
        this.audited = audited;
        this.certified = certified;
        this.percentAudited = percentAudited;
        this.percentCertified = percentCertified;
        this.percentCertified50 = percentCertified50;
        this.percentVideo = percentVideo;
        this.percentForum = percentForum;
        this.gradeHigherZero = gradeHigherZero;
        this.totalHours = totalHours;
        this.medianHoursCertification = medianHoursCertification;
        this.medianAge = medianAge;
        this.percentMale = percentMale;
        this.percentFemale = percentFemale;
        this.percentDegree = percentDegree;



    }
    public String getInstitution(){return institution;}
    public int getParticipants(){return participants;}
    public String getSubject(){return subject;}
    public String getTitle(){return title;}
    public double getTotalHours(){return totalHours;}
    public String getInstructors(){return instructors;}
    public double getPercentAudited(){return percentAudited;}
    public double getMedianAge(){return medianAge;}
    public double getPercentMale(){return percentMale;}
    public double getPercentDegree(){return percentDegree;}
    public String getNumber(){return number;}
    public Date getLaunchDate(){return launchDate;}

    public double getSimilarity(){return similarity;}

    public void setSimilarity(double sim){this.similarity=sim;}
}
